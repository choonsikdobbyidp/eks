name: Build and Deploy to EKS via Argo CD

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: List files for debugging
      run: ls -l

    - name: Install dos2unix
      run: sudo apt-get update && sudo apt-get install -y dos2unix

    - name: Convert files from CRLF to LF
      run: |
        find . -type f -exec dos2unix {} \;

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: .
        file: vite-project/Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/vite-app:latest

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Install kubectl
      run: |
        curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

    - name: Install Argo CD CLI
      run: |
        curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        chmod +x /usr/local/bin/argocd

    - name: Log in to Argo CD
      run: |
        argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure

    - name: Create or update Argo CD application
      run: |
        REPO_URL="https://github.com/${{ github.repository }}.git"
        argocd app get vite-app || argocd app create vite-app \
          --repo $REPO_URL \
          --path k8s \
          --dest-server https://kubernetes.default.svc \
          --dest-namespace default \
          --sync-policy automated

    - name: Sync Argo CD application
      run: |
        argocd app sync vite-app
        argocd app wait vite-app --health